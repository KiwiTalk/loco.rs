use crate::packet::DecodeError;

pub enum ProtocolInfo {
    None = 0,
    GetConfig = 1,
    BuyCallServer = 2,
    NetworkTest = 3,
    CheckIn = 4,
    Down = 5,
    Mini = 6,
    Complete = 7,
    Post = 8,
    SyncPost = 9,
    MultiPost = 10,
    AddMember = 11,
    NewMember = 12,
    Leave = 13,
    DeleteMember = 14,
    Left = 15,
    BlockSync = 16,
    BlockAddItem = 17,
    BlockDeleteItem = 18,
    BlockSpam = 19,
    BlockSpams = 20,
    BlockMember = 21,
    Ship = 22,
    MultiShip = 23,
    GetTrailer = 24,
    Invoice = 25,
    MultiInvoice = 26,
    MultiCheckTokens = 27,
    Create = 28,
    PublicCreate = 29,
    ChatInfo = 30,
    ChatOff = 31,
    ChatOnRoom = 32,
    GetMeta = 33,
    SetMeta = 34,
    ChangeMeta = 35,
    GetMetas = 36,
    GetMCMeta = 37,
    SetMCMeta = 38,
    ChangeMCMeta = 39,
    GetChatST = 40,
    SetChatST = 41,
    ChangePlusChatStatus = 42,
    UpdateChat = 43,
    GetMember = 44,
    Member = 45,
    Write = 46,
    Message = 47,
    Forward = 48,
    DecreaseUnread = 49,
    ClearNotification = 50,
    #[deprecated]
    ClearBadge = 51,
    MChatLogs = 52,
    SyncMessage = 53,
    DeleteMessage = 54,
    SyncDeleteMessage = 55,
    SelfDeleteMessage = 56,
    SelfDLAMessage = 57,
    LoginList = 58,
    LocoChatList = 59,
    ChangeServer = 60,
    Ping = 61,
    VoiceEvent = 62,
    SecretCreate = 63,
    SecretWrite = 64,
    SecretAddMember = 65,
    SetPublicKey = 66,
    SetSecretKey = 67,
    GetPublicKey = 68,
    GetSecretKey = 69,
    GetLocoPublicKey = 70,
    CreateLink = 71,
    DeleteLink = 72,
    JoinLink = 73,
    JoinInfo = 74,
    InfoLink = 75,
    SyncLink = 76,
    UpdateLinkProfile = 77,
    KickLeave = 78,
    UpdateLink = 79,
    RepoLeave = 80,
    SyncMainProfile = 81,
    SyncLinkCreated = 82,
    SyncLinkUpdated = 83,
    SyncLinkDeleted = 84,
    KickMember = 85,
    ReportMember = 86,
    LinkDeleted = 87,
    SyncLinkProfile = 88,
    Kicked = 89,
    SyncJoin = 90,
    Feed = 91,
    CheckJoin = 92,
    Blind = 93,
    SyncBlind = 94,
    ReportLink = 95,
    KLSync = 96,
    // TODO: What is KL?
    KLDeleteItem = 97,
    // TODO: What is KL?
    React = 98,
    ReactCount = 99,
    SetMemberType = 100,
    SyncMemberType = 101,
    Rewrite = 102,
    SyncRewrite = 103,
    RelayEvent = 104,
    SyncEvent = 105,
    NotificationReceiveSync = 106,
    ChangeMoimMetas = 107,
    GetMoimMeta = 108,
    MoimClick = 109,
    SetStatus = 110,
    PushAck = 111,
    SyncPush = 112,
    GetToken = 113,
}

impl ProtocolInfo {
    pub(crate) fn from_bytes(discriminant: &[u8]) -> Result<Self, DecodeError> {
        match discriminant {
            b"" => Ok(ProtocolInfo::None),
            b"GETCONF" => Ok(ProtocolInfo::GetConfig),
            b"BUYCS" => Ok(ProtocolInfo::BuyCallServer),
            b"NETTEST" => Ok(ProtocolInfo::NetworkTest),
            b"CHECKIN" => Ok(ProtocolInfo::CheckIn),
            b"DOWN" => Ok(ProtocolInfo::Down),
            b"MINI" => Ok(ProtocolInfo::Mini),
            b"COMPLETE" => Ok(ProtocolInfo::Complete),
            b"POST" => Ok(ProtocolInfo::Post),
            b"SPOST" => Ok(ProtocolInfo::SyncPost),
            b"MPOST" => Ok(ProtocolInfo::MultiPost),
            b"ADDMEM" => Ok(ProtocolInfo::AddMember),
            b"NEWMEM" => Ok(ProtocolInfo::NewMember),
            b"LEAVE" => Ok(ProtocolInfo::Leave),
            b"DELMEM" => Ok(ProtocolInfo::DeleteMember),
            b"LEFT" => Ok(ProtocolInfo::Left),
            b"BLSYNC" => Ok(ProtocolInfo::BlockSync),
            b"BLADDITEM" => Ok(ProtocolInfo::BlockAddItem),
            b"BLDELITEM" => Ok(ProtocolInfo::BlockDeleteItem),
            b"BLSPAM" => Ok(ProtocolInfo::BlockSpam),
            b"BLSPAMS" => Ok(ProtocolInfo::BlockSpams),
            b"BLMEMBER" => Ok(ProtocolInfo::BlockMember),
            b"SHIP" => Ok(ProtocolInfo::Ship),
            b"MSHIP" => Ok(ProtocolInfo::MultiShip),
            b"GETTRAILER" => Ok(ProtocolInfo::GetTrailer),
            b"INVOICE" => Ok(ProtocolInfo::Invoice),
            b"MINVOICE" => Ok(ProtocolInfo::MultiInvoice),
            b"MCHKTOKENS" => Ok(ProtocolInfo::MultiCheckTokens),
            b"CREATE" => Ok(ProtocolInfo::Create),
            b"PCREATE" => Ok(ProtocolInfo::PublicCreate),
            b"CHATINFO" => Ok(ProtocolInfo::ChatInfo),
            b"CHATOFF" => Ok(ProtocolInfo::ChatOff),
            b"CHATONROOM" => Ok(ProtocolInfo::ChatOnRoom),
            b"GETMETA" => Ok(ProtocolInfo::GetMeta),
            b"SETMETA" => Ok(ProtocolInfo::SetMeta),
            b"CHGMETA" => Ok(ProtocolInfo::ChangeMeta),
            b"GETMETAS" => Ok(ProtocolInfo::GetMetas),
            b"GETMCMETA" => Ok(ProtocolInfo::GetMCMeta),
            b"SETMCMETA" => Ok(ProtocolInfo::SetMCMeta),
            b"CHGMCMETA" => Ok(ProtocolInfo::ChangeMCMeta),
            b"GETCHATST" => Ok(ProtocolInfo::GetChatST),
            b"SETCHATST" => Ok(ProtocolInfo::SetChatST),
            b"CHGCHATST" => Ok(ProtocolInfo::ChangePlusChatStatus),
            b"UPDATECHAT" => Ok(ProtocolInfo::UpdateChat),
            b"GETMEM" => Ok(ProtocolInfo::GetMember),
            b"MEMBER" => Ok(ProtocolInfo::Member),
            b"WRITE" => Ok(ProtocolInfo::Write),
            b"MSG" => Ok(ProtocolInfo::Message),
            b"FORWARD" => Ok(ProtocolInfo::Forward),
            b"DECUNREAD" => Ok(ProtocolInfo::DecreaseUnread),
            b"CLEARNOTI" => Ok(ProtocolInfo::ClearNotification),
            b"CLRBDG" => Ok(ProtocolInfo::ClearBadge),
            b"MCHATLOGS" => Ok(ProtocolInfo::MChatLogs),
            b"SYNCMSG" => Ok(ProtocolInfo::SyncMessage),
            b"DELETEMSG" => Ok(ProtocolInfo::DeleteMessage),
            b"SYNCDLMSG" => Ok(ProtocolInfo::SyncDeleteMessage),
            b"SELFDLMSG" => Ok(ProtocolInfo::SelfDeleteMessage),
            b"SELFDLAMSG" => Ok(ProtocolInfo::SelfDLAMessage),
            b"LOGINLIST" => Ok(ProtocolInfo::LoginList),
            b"LCHATLIST" => Ok(ProtocolInfo::LocoChatList),
            b"CHANGESVR" => Ok(ProtocolInfo::ChangeServer),
            b"VOEVENT" => Ok(ProtocolInfo::VoiceEvent),
            b"SCREATE" => Ok(ProtocolInfo::SecretCreate),
            b"SWRITE" => Ok(ProtocolInfo::SecretWrite),
            b"SADDMEM" => Ok(ProtocolInfo::SecretAddMember),
            b"SETPK" => Ok(ProtocolInfo::SetPublicKey),
            b"SETSK" => Ok(ProtocolInfo::SetSecretKey),
            b"GETPK" => Ok(ProtocolInfo::GetPublicKey),
            b"GETSK" => Ok(ProtocolInfo::GetSecretKey),
            b"GETLPK" => Ok(ProtocolInfo::GetLocoPublicKey),
            b"CREATELINK" => Ok(ProtocolInfo::CreateLink),
            b"DELETELINK" => Ok(ProtocolInfo::DeleteLink),
            b"JOINLINK" => Ok(ProtocolInfo::JoinLink),
            b"JOININFO" => Ok(ProtocolInfo::JoinInfo),
            b"INFOLINK" => Ok(ProtocolInfo::InfoLink),
            b"SYNCLINK" => Ok(ProtocolInfo::SyncLink),
            b"UPLINKPROF" => Ok(ProtocolInfo::UpdateLinkProfile),
            b"KICKLEAVE" => Ok(ProtocolInfo::KickLeave),
            b"UPDATELINK" => Ok(ProtocolInfo::UpdateLink),
            b"REPOLEAVE" => Ok(ProtocolInfo::RepoLeave),
            b"SYNCMAINPF" => Ok(ProtocolInfo::SyncMainProfile),
            b"SYNCLINKCR" => Ok(ProtocolInfo::SyncLinkCreated),
            b"SYNCLINKUP" => Ok(ProtocolInfo::SyncLinkUpdated),
            b"SYNCLINKDL" => Ok(ProtocolInfo::SyncLinkDeleted),
            b"KICKMEM" => Ok(ProtocolInfo::KickMember),
            b"REPORTMEM" => Ok(ProtocolInfo::ReportMember),
            b"LNKDELETED" => Ok(ProtocolInfo::LinkDeleted),
            b"SYNCLINKPF" => Ok(ProtocolInfo::SyncLinkProfile),
            b"KICKED" => Ok(ProtocolInfo::Kicked),
            b"SYNCJOIN" => Ok(ProtocolInfo::SyncJoin),
            b"FEED" => Ok(ProtocolInfo::Feed),
            b"CHECKJOIN" => Ok(ProtocolInfo::CheckJoin),
            b"BLIND" => Ok(ProtocolInfo::Blind),
            b"SYNCBLIND" => Ok(ProtocolInfo::SyncBlind),
            b"REPORTLINK" => Ok(ProtocolInfo::ReportLink),
            b"KLSYNC" => Ok(ProtocolInfo::KLSync),
            b"KLDELITEM" => Ok(ProtocolInfo::KLDeleteItem),
            b"REACT" => Ok(ProtocolInfo::React),
            b"REACTCNT" => Ok(ProtocolInfo::ReactCount),
            b"SETMEMTYPE" => Ok(ProtocolInfo::SetMemberType),
            b"SYNCMEMT" => Ok(ProtocolInfo::SyncMemberType),
            b"REWRITE" => Ok(ProtocolInfo::Rewrite),
            b"SYNCREWR" => Ok(ProtocolInfo::SyncRewrite),
            b"RELAYEVENT" => Ok(ProtocolInfo::RelayEvent),
            b"SYNCEVENT" => Ok(ProtocolInfo::SyncEvent),
            b"NOTIRCVS" => Ok(ProtocolInfo::NotificationReceiveSync),
            b"CHGMOMETAS" => Ok(ProtocolInfo::ChangeMoimMetas),
            b"GETMOMETA" => Ok(ProtocolInfo::GetMoimMeta),
            b"MOCLICK" => Ok(ProtocolInfo::MoimClick),
            b"SETST" => Ok(ProtocolInfo::SetStatus),
            b"PUSHACK" => Ok(ProtocolInfo::PushAck),
            b"SPUSH" => Ok(ProtocolInfo::SyncPush),
            b"GETTOKEN" => Ok(ProtocolInfo::GetToken),
            b"PING" => Ok(ProtocolInfo::Ping),
            _ => Err(DecodeError::InvalidDiscriminant(discriminant)),
        }
    }

    pub(crate) fn as_bytes(&self) -> &'static [u8] {
        match self {
            ProtocolInfo::None => b"",
            ProtocolInfo::GetConfig => b"GETCONF",
            ProtocolInfo::BuyCallServer => b"BUYCS",
            ProtocolInfo::NetworkTest => b"NETTEST",
            ProtocolInfo::CheckIn => b"CHECKIN",
            ProtocolInfo::Down => b"DOWN",
            ProtocolInfo::Mini => b"MINI",
            ProtocolInfo::Complete => b"COMPLETE",
            ProtocolInfo::Post => b"POST",
            ProtocolInfo::SyncPost => b"SPOST",
            ProtocolInfo::MultiPost => b"MPOST",
            ProtocolInfo::AddMember => b"ADDMEM",
            ProtocolInfo::NewMember => b"NEWMEM",
            ProtocolInfo::Leave => b"LEAVE",
            ProtocolInfo::DeleteMember => b"DELMEM",
            ProtocolInfo::Left => b"LEFT",
            ProtocolInfo::BlockSync => b"BLSYNC",
            ProtocolInfo::BlockAddItem => b"BLADDITEM",
            ProtocolInfo::BlockDeleteItem => b"BLDELITEM",
            ProtocolInfo::BlockSpam => b"BLSPAM",
            ProtocolInfo::BlockSpams => b"BLSPAMS",
            ProtocolInfo::BlockMember => b"BLMEMBER",
            ProtocolInfo::Ship => b"SHIP",
            ProtocolInfo::MultiShip => b"MSHIP",
            ProtocolInfo::GetTrailer => b"GETTRAILER",
            ProtocolInfo::Invoice => b"INVOICE",
            ProtocolInfo::MultiInvoice => b"MINVOICE",
            ProtocolInfo::MultiCheckTokens => b"MCHKTOKENS",
            ProtocolInfo::Create => b"CREATE",
            ProtocolInfo::PublicCreate => b"PCREATE",
            ProtocolInfo::ChatInfo => b"CHATINFO",
            ProtocolInfo::ChatOff => b"CHATOFF",
            ProtocolInfo::ChatOnRoom => b"CHATONROOM",
            ProtocolInfo::GetMeta => b"GETMETA",
            ProtocolInfo::SetMeta => b"SETMETA",
            ProtocolInfo::ChangeMeta => b"CHGMETA",
            ProtocolInfo::GetMetas => b"GETMETAS",
            ProtocolInfo::GetMCMeta => b"GETMCMETA",
            ProtocolInfo::SetMCMeta => b"SETMCMETA",
            ProtocolInfo::ChangeMCMeta => b"CHGMCMETA",
            ProtocolInfo::GetChatST => b"GETCHATST",
            ProtocolInfo::SetChatST => b"SETCHATST",
            ProtocolInfo::ChangePlusChatStatus => b"CHGCHATST",
            ProtocolInfo::UpdateChat => b"UPDATECHAT",
            ProtocolInfo::GetMember => b"GETMEM",
            ProtocolInfo::Member => b"MEMBER",
            ProtocolInfo::Write => b"WRITE",
            ProtocolInfo::Message => b"MSG",
            ProtocolInfo::Forward => b"FORWARD",
            ProtocolInfo::DecreaseUnread => b"DECUNREAD",
            ProtocolInfo::ClearNotification => b"CLEARNOTI",
            ProtocolInfo::ClearBadge => b"CLRBDG",
            ProtocolInfo::MChatLogs => b"MCHATLOGS",
            ProtocolInfo::SyncMessage => b"SYNCMSG",
            ProtocolInfo::DeleteMessage => b"DELETEMSG",
            ProtocolInfo::SyncDeleteMessage => b"SYNCDLMSG",
            ProtocolInfo::SelfDeleteMessage => b"SELFDLMSG",
            ProtocolInfo::SelfDLAMessage => b"SELFDLAMSG",
            ProtocolInfo::LoginList => b"LOGINLIST",
            ProtocolInfo::LocoChatList => b"LCHATLIST",
            ProtocolInfo::ChangeServer => b"CHANGESVR",
            ProtocolInfo::VoiceEvent => b"VOEVENT",
            ProtocolInfo::SecretCreate => b"SCREATE",
            ProtocolInfo::SecretWrite => b"SWRITE",
            ProtocolInfo::SecretAddMember => b"SADDMEM",
            ProtocolInfo::SetPublicKey => b"SETPK",
            ProtocolInfo::SetSecretKey => b"SETSK",
            ProtocolInfo::GetPublicKey => b"GETPK",
            ProtocolInfo::GetSecretKey => b"GETSK",
            ProtocolInfo::GetLocoPublicKey => b"GETLPK",
            ProtocolInfo::CreateLink => b"CREATELINK",
            ProtocolInfo::DeleteLink => b"DELETELINK",
            ProtocolInfo::JoinLink => b"JOINLINK",
            ProtocolInfo::JoinInfo => b"JOININFO",
            ProtocolInfo::InfoLink => b"INFOLINK",
            ProtocolInfo::SyncLink => b"SYNCLINK",
            ProtocolInfo::UpdateLinkProfile => b"UPLINKPROF",
            ProtocolInfo::KickLeave => b"KICKLEAVE",
            ProtocolInfo::UpdateLink => b"UPDATELINK",
            ProtocolInfo::RepoLeave => b"REPOLEAVE",
            ProtocolInfo::SyncMainProfile => b"SYNCMAINPF",
            ProtocolInfo::SyncLinkCreated => b"SYNCLINKCR",
            ProtocolInfo::SyncLinkUpdated => b"SYNCLINKUP",
            ProtocolInfo::SyncLinkDeleted => b"SYNCLINKDL",
            ProtocolInfo::KickMember => b"KICKMEM",
            ProtocolInfo::ReportMember => b"REPORTMEM",
            ProtocolInfo::LinkDeleted => b"LNKDELETED",
            ProtocolInfo::SyncLinkProfile => b"SYNCLINKPF",
            ProtocolInfo::Kicked => b"KICKED",
            ProtocolInfo::SyncJoin => b"SYNCJOIN",
            ProtocolInfo::Feed => b"FEED",
            ProtocolInfo::CheckJoin => b"CHECKJOIN",
            ProtocolInfo::Blind => b"BLIND",
            ProtocolInfo::SyncBlind => b"SYNCBLIND",
            ProtocolInfo::ReportLink => b"REPORTLINK",
            ProtocolInfo::KLSync => b"KLSYNC",
            ProtocolInfo::KLDeleteItem => b"KLDELITEM",
            ProtocolInfo::React => b"REACT",
            ProtocolInfo::ReactCount => b"REACTCNT",
            ProtocolInfo::SetMemberType => b"SETMEMTYPE",
            ProtocolInfo::SyncMemberType => b"SYNCMEMT",
            ProtocolInfo::Rewrite => b"REWRITE",
            ProtocolInfo::SyncRewrite => b"SYNCREWR",
            ProtocolInfo::RelayEvent => b"RELAYEVENT",
            ProtocolInfo::SyncEvent => b"SYNCEVENT",
            ProtocolInfo::NotificationReceiveSync => b"NOTIRCVS",
            ProtocolInfo::ChangeMoimMetas => b"CHGMOMETAS",
            ProtocolInfo::GetMoimMeta => b"GETMOMETA",
            ProtocolInfo::MoimClick => b"MOCLICK",
            ProtocolInfo::SetStatus => b"SETST",
            ProtocolInfo::PushAck => b"PUSHACK",
            ProtocolInfo::SyncPush => b"SPUSH",
            ProtocolInfo::GetToken => b"GETTOKEN",
            ProtocolInfo::Ping => b"PING",
        }
    }
}

impl serde::Serialize for ProtocolInfo {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
        where
            S: serde::Serializer
    {
        serializer.serialize_bytes(self.as_bytes())
    }
}
